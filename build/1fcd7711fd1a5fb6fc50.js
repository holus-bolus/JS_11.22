class Stack{constructor(t=10){if("number"!=typeof t||t===1/0||t===-1/0||0===t)throw new Error("Invalid limit value");this.maxSize=t,this.stack={},this.stackCounter=0}push(t){if(this.stackCounter>=this.maxSize)throw new Error("Limit exceeded");this.stackCounter+=1,this.stack[this.stackCounter]=t}pop(){if(0===this.stackCounter)throw new Error("Empty stack");const t=this.stack[this.stackCounter];return delete this.stack[this.stackCounter],this.stackCounter-=1,t}peek(){return 0===this.stack.length?null:this.stack[this.stackCounter-1]}isEmpty(){return 0===this.stackCounter}toArray(){return Object.values(this.stack)}static fromIterable=t=>{if("function"!=typeof t[Symbol.iterator]||!t)throw new Error("Not iterable");const e=new Stack(t.length);for(let r of t)e.push(r);return e}}class LinkedList{#t=null;#e=null;append(t){let e=new Node(t);null===this.#t?(this.#t=e,this.#e=e):(this.#e.next=e,this.#e=e)}prepend(t){let e=new Node(t);null===this.#t?(this.#t=e,this.#e=e):(e.next=this.#t,this.#t=e)}find(t){if(null===this.#t)return null;let e=this.#t;return this.#r(e,t)}toArray(){return this.#n(this.#t,[])}static fromIterable=t=>{if("function"!=typeof t[Symbol.iterator]||!t)throw new Error("Not iterable");const e=new LinkedList;for(let r of t)e.append(r);return e};#r(t,e){return t.value===e?t.value:null===t.next?null:this.#r(t.next,e)}#n(t,e){return null===t?e:(e.push(t.value),this.#n(t.next,e))}}class Car{#i;#s;#o;#u;#a;#l;#h=0;#f=!1;#m=0;#c=100;constructor(t,e,r,n,i,s){this.brand=t,this.model=e,this.yearOfManufacturing=r,this.maxSpeed=n,this.maxFuelVolume=i,this.fuelConsumption=s}start(){if(this.#f)throw new Error("The car has been started already");this.#f=!0}shutDownEngine(){if(!this.#f)throw new Error("The car hasn't been started yet");this.#f=!1}fillUpGasTank(t){if("number"!=typeof t||t<=0)throw new Error("Invalid fuel amount");if(this.#h+t>this.#a)throw new Error("Too much fuel");if(this.#f)throw new Error("You have to shut down your car first");this.#h+=t}drive(t,e){if("number"!=typeof t||t<=0)throw new Error("Invalid speed");if("number"!=typeof e||e<=0)throw new Error("Invalid duration");if(t>this.#u)throw new Error("Car can't go this fast");if(!this.#f)throw new Error("You have to start your car first");const r=this.#l*(t*e/100);if(this.#h-r<0)throw new Error("You don't have enough fuel");if(this.#c<0)throw new Error("Your car won't make it");this.#h-=r,this.#m+=t*e,this.#c-=1}repair(){if(this.#f)throw new Error("You have to shut down your car first");if(this.#h<0)throw new Error("You have to fill up your gas tank first");this.#c=100}getFullAmount(){return this.#h===parseInt(this.maxFuelVolume)?0:parseInt(this.maxFuelVolume)-this.#h}get brand(){return this.#i}set brand(t){if("string"!=typeof t||t.length<1||t.length>50)throw new Error("Invalid input");this.#i=t}get model(){return this.#s}set model(t){if("string"!=typeof t||t.length<1||t.length>50)throw new Error("Invalid input");this.#s=t}get yearOfManufacturing(){return this.#o}set yearOfManufacturing(t){const e=(new Date).getFullYear();if("number"!=typeof t||t<1950||t>e)throw new Error("Invalid input");this.#o=t}get maxSpeed(){return`${this.#u} km/h`}set maxSpeed(t){if("number"!=typeof t||t<100||t>300)throw new Error("Incorrect input");this.#u=t}get maxFuelVolume(){return`${this.#a} liters`}set maxFuelVolume(t){if("number"!=typeof t||t<5||t>20)throw new Error("Incorrect input");this.#a=t}get fuelConsumption(){return`${this.#l} liters/100 km`}set fuelConsumption(t){if("number"!=typeof t)throw new Error("Incorrect input");this.#l=t}get currentFuelVolume(){return`${this.#h} liters`}get isStarted(){return this.#f?"true":"false"}get mileage(){return`${this.#m} km`}}